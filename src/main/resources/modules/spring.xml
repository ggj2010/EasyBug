<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd 
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
    <context:property-placeholder location="classpath*:config/jdbc.properties"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
	    p:driverClassName="${jdbc.driverClassName}"
	    p:url="${jdbc.url}"
	    p:username="${jdbc.username}"
	    p:password="${jdbc.password}"
	    p:initialSize="${jdbc.initialSize}"
	    p:maxIdle="${jdbc.maxIdle}"
	    p:maxActive="${jdbc.maxActive}"
	    p:maxWait="${jdbc.maxWait}"
	    p:minIdle="${jdbc.minIdle}"
	    p:timeBetweenEvictionRunsMillis="${jdbc.timeBetweenEvictionRunsMillis}"
	    p:minEvictableIdleTimeMillis="${jdbc.minEvictableIdleTimeMillis}"
	      />
	
	<!-- session工厂 -->   
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<!--找到hibernate-->
		    <property name="configLocation">  
			   <value>classpath:modules/hibernate.cfg.xml</value>  
			</property>
			<property name="hibernateProperties">
				<props>
					<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
					<prop key="hibernate.show_sql">false</prop>
					<prop key="hibernate.hbm2ddl.auto">update</prop>
					<prop key="hibernate.query.substitutions">true 1, false 0, yes 1, no 0</prop>
				</props>
			</property>
		


	</bean>
	<!--springMvc 上传  -->
	 <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver" p:defaultEncoding="utf-8">  
        <property name="maxUploadSize">  
            <value>104857600</value>  
        </property>  
        <property name="maxInMemorySize">  
            <value>4096</value>  
        </property>  
    </bean>  
	 
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate"
		 p:sessionFactory-ref="sessionFactory" />
	
	<!-- 事务管理器,当持久机制是Hibernate时的事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		 p:sessionFactory-ref="sessionFactory" />
     
 	<!-- 配置事务边界  注入事务 那些类那些方法使用事务  -->
	<aop:config>
		<aop:pointcut id="serviceMethod" expression="execution(* com.gaoguangjin.*.service.*.*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	
	<!--配置事务的传播特性 事务的切面 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--事务传播行为:propagation="REQUIRED" -->
			<!--与事务属性关联的方法名通配符-->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="get*" propagation="REQUIRED"/>
			<!--read-only事务是否只读-->
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 　　 <tx:annotation-driven/>  -->
	<context:component-scan base-package="com.gaoguangjin.*.dao" />
	<context:component-scan base-package="com.gaoguangjin.*.service" />
	
	
		<!-- 要调用的工作类 -->
	<bean id="userLogJob" class="com.gaoguangjin.quartz.UserLogJob"></bean>
    <!-- 定义调用对象和调用对象的方法 -->
	<bean id="userLogtask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 调用的类 -->
        <property name="targetObject">
            <ref bean="userLogJob"/>
        </property>
        <!-- 调用类中的方法 -->
        <property name="targetMethod">
            <value>work</value>
        </property>
    </bean>
	<bean id="userLogTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="JobDetail">
            <ref bean="userLogtask"/>
        </property>
        <!-- cron表达式 -->
        <property name="cronExpression">
            <value>0/10 * * * * ?</value>
        </property>
    </bean>
    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
    <bean id="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
				<ref bean="userLogTime"/>
            </list>
        </property>
    </bean>
	
</beans>
  